@mixin generate-utility($utility, $infix) {
  $values: map-get($utility, values);

  // If the values are a list or string, convert it into a map
  @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
    $values: zip($values, $values);
  }

  @each $key, $value in $values {
    $properties: map-get($utility, property);

    // Multiple properties are possible, for example with vertical or horizontal margins or paddings
    @if type-of($properties) == "string" {
      $properties: append((), $properties);
    }

    // Use custom class if present
    $property-class: if(
      map-has-key($utility, class),
      map-get($utility, class),
      nth($properties, 1)
    );
    $property-class: if($property-class == null, "", $property-class);

    // State params to generate pseudo-classes
    $state: if(map-has-key($utility, state), map-get($utility, state), ());

    $infix: if(
      $property-class == "" and str-slice($infix, 1, 1) == "-",
      str-slice($infix, 2),
      $infix
    );

    // Don't prefix if value key is null (eg. with shadow class)
    $property-class-modifier: if(
      $key,
      if($property-class == "" and $infix == "", "", "-") + $key,
      ""
    );

    @if $value != null {
      .#{$property-class + $infix + $property-class-modifier} {
        @each $property in $properties {
          #{$property}: $value
            if($enable-important-utilities, !important, null);
        }
      }

      @each $pseudo in $state {
        .#{$property-class
          + $infix
          + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
          @each $property in $properties {
            #{$property}: $value
              if($enable-important-utilities, !important, null);
          }
        }
      }
    }
  }

  //   @if type-of($values) == "list" {
  //     @each $key, $value in $values {
  //       $property-class: "";
  //       @if (map-has-key($utility, class)) {
  //         $property-class: map-get($utility, class);
  //       } @else {
  //         $property-class: $utility-key;
  //       }

  //       $state: if(map-has-key($utility, state), map-get($utility, state), ());
  //       $property-class-modifier: if(
  //         $key,
  //         if($property-class == "" and $infix == "", "", "-") + $key,
  //         ""
  //       );

  //       @debug map-get($utility, property);

  //       .#{$property-class + $infix + $property-class-modifier} {
  //         #{map-get($utility, property)}: $key !important;
  //       }

  //       @each $pseudo in $state {
  //         .#{$property-class
  //           + $infix
  //           + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
  //           #{map-get($utility, property)}: $key !important;
  //         }
  //       }
  //     }
  //   }
}
